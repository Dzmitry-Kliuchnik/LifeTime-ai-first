"""Initial migration with User and Note models

Revision ID: 97edff2bb60a
Revises: 
Create Date: 2025-10-05 08:18:43.852891

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '97edff2bb60a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False, comment='Unique username for login'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Bcrypt hashed password'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the user account is active'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether the user email is verified'),
    sa.Column('is_superuser', sa.Boolean(), nullable=False, comment='Whether the user has admin privileges'),
    sa.Column('full_name', sa.String(length=255), nullable=True, comment="User's full display name"),
    sa.Column('bio', sa.Text(), nullable=True, comment='User biography or description'),
    sa.Column('last_login', sa.DateTime(), nullable=True, comment='Last login timestamp'),
    sa.Column('email_verified_at', sa.DateTime(), nullable=True, comment='Email verification timestamp'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='Record last update timestamp'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False, comment='Note title or subject'),
    sa.Column('content', sa.Text(), nullable=False, comment='Main note content'),
    sa.Column('summary', sa.Text(), nullable=True, comment='AI-generated summary of the note'),
    sa.Column('is_favorite', sa.Boolean(), nullable=False, comment='Whether the note is marked as favorite'),
    sa.Column('is_archived', sa.Boolean(), nullable=False, comment='Whether the note is archived'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Note category'),
    sa.Column('tags', sa.Text(), nullable=True, comment='Comma-separated tags'),
    sa.Column('word_count', sa.Integer(), nullable=True, comment='Number of words in the note'),
    sa.Column('reading_time', sa.Integer(), nullable=True, comment='Estimated reading time in minutes'),
    sa.Column('deleted_at', sa.DateTime(), nullable=True, comment='Soft deletion timestamp'),
    sa.Column('owner_id', sa.Integer(), nullable=False, comment='ID of the user who owns this note'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_notes_category', 'notes', ['category'], unique=False)
    op.create_index(op.f('ix_notes_id'), 'notes', ['id'], unique=False)
    op.create_index('ix_notes_owner_archived', 'notes', ['owner_id', 'is_archived'], unique=False)
    op.create_index('ix_notes_owner_created', 'notes', ['owner_id', 'created_at'], unique=False)
    op.create_index('ix_notes_owner_deleted', 'notes', ['owner_id', 'is_deleted'], unique=False)
    op.create_index('ix_notes_owner_favorite', 'notes', ['owner_id', 'is_favorite'], unique=False)
    op.create_index('ix_notes_title_search', 'notes', ['title'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_notes_title_search', table_name='notes')
    op.drop_index('ix_notes_owner_favorite', table_name='notes')
    op.drop_index('ix_notes_owner_deleted', table_name='notes')
    op.drop_index('ix_notes_owner_created', table_name='notes')
    op.drop_index('ix_notes_owner_archived', table_name='notes')
    op.drop_index(op.f('ix_notes_id'), table_name='notes')
    op.drop_index('ix_notes_category', table_name='notes')
    op.drop_table('notes')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
